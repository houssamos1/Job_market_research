name: Job_analytics_app

services:

  redis:
    image: redis:latest
    container_name: redis

    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  redis-commander:
    image: rediscommander/redis-commander
    container_name: rediscommander

    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    image: app_worker
    container_name: celery_container

    command: ["sh", "/app/celery_app/start.sh"]
    depends_on:
      - redis
    user: celery_user
    volumes:
      - ./celery_app:/app/celery_app
      - ./data_extraction/Websites:/app/data_extraction/Websites
      - output:/app/data_extraction/scraping_output
      - logs:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .docker.env
    environment:
      - PYTHONPATH=/app

  flower:

    image: app_worker
    container_name: flower_container
    ports:
      - "5555:5555"
    command: [ "celery", "-A", "celery_app.tasks", "flower", "--port=5555", "--loglevel=info" ]
    user: celery_user
    volumes:
      - ./celery_app:/app/celery_app
      - ./data_extraction/Websites:/app/data_extraction/Websites
      - output:/app/data_extraction/scraping_output
      - logs:/var/log
    env_file:
      - .docker.env
    depends_on:
      - redis
      - celery
  data_extraction:
    image: app_worker
    container_name: data_extraction_container
    volumes:
      - ./celery_app:/app/celery_app
      - ./data_extraction/Websites:/app/data_extraction/Websites
      - output:/app/data_extraction/scraping_output
      - logs:/var/log
    depends_on:
      - redis
      - celery
    user: celery_user
    command: [ "python", "/app/data_extraction/web_scrape.py" ]
    env_file:
      - .docker.env
    environment:
      - PYTHONPATH=/app
  minio:
    image: minio/minio

    container_name: minio
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
      - 9080:9080

    env_file:
      - .docker.env
    command: [ "minio", "server", '--console-address', ":9080", "/data" ]

  postgres:
    image: postgres:latest

    ports:
      - "5430:5432"

    container_name: postgres

    env_file:
      - .docker.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8080:8080
  spark_transform:
    build:
      context: ./spark_pipeline
      dockerfile: Dockerfile.spark
    container_name: spark_transform
    command: [ "sleep", "infinity" ]
    depends_on:
      - minio
    volumes:
      - ./spark_pipeline/transform_job.py:/opt/transform_job.py
    env_file:
      - .docker.env

volumes:
  redis_data:
  minio_data:
  logs:
  output:
  postgres_data:
